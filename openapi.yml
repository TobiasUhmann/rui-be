openapi: 3.0.0

info:
  description: API for the RUI backend
  version: '1.2.0'
  title: RUI
  contact:
    email: tobias.uhmann@gmail.com

tags:
  - name: upload
    description: Upload initial taxonomy and matches
  - name: entities
  - name: matches

paths:

  /upload:

    put:
      tags:
        - upload
      summary: Put taxonomy and matches
      operationId: putUpload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metaYml:
                  type: string
                  format: binary
                nodesTxt:
                  type: string
                  format: binary
                edgesTxt:
                  type: string
                  format: binary
                matchTxt:
                  type: string
                  format: binary
      responses:
        '200':
          description: Put taxonomy and matches successfully

  /entities:

    get:
      tags:
        - entities
      summary: |
        Get the root entities, enriched by their recursively enriched
        child entities
      operationId: getEntities
      responses:
        '200':
          description: Got root entities successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  entities:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeepEntity'

  /entity:

    post:
      tags:
        - entities
      summary: Post entity
      operationId: postEntity
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '201':
          description: Posted entity successfully

    put:
      tags:
        - entities
      summary: Put entity
      operationId: putEntity
      requestBody:
        $ref: '#/components/requestBodies/Entity'
      responses:
        '200':
          description: Put entity successfully

  '/entity/{entityId}':

    delete:
      tags:
        - entities
      summary: Delete entity
      operationId: deleteEntity
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deleted entity successfully

  /matches:

    get:
      tags:
        - matches
      summary: Get matches for an entity
      operationId: getMatches
      parameters:
        - in: query
          name: entity
          schema:
            type: string
          description: Entity whose matches to get
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination Limit
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination Offset
      responses:
        '200':
          description: Got matches for entity successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  matches:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'

components:

  schemas:

    Entity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        parent:
          type: integer
          format: int64
        name:
          type: string
          example: Short circuit

    DeepEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        parent:
          type: integer
          format: int64
        names:
          type: array
          items:
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/DeepEntity'

    Match:
      type: object
      properties:
        entity:
          type: string
        mention:
          type: string
        ticket:
          type: integer
          format: int64
        phrase:
          type: object
          properties:
            id:
              type: integer
              format: int64
            text:
              type: string

  requestBodies:

    Entity:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'
