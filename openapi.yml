openapi: 3.0.0

info:
  description: API for the RUI backend
  version: 1.4.0
  title: RUI
  contact:
    email: tobias.uhmann@gmail.com

tags:
  - name: upload
    description: Upload initial taxonomy and matches
  - name: nodes
  - name: entities
  - name: matches

paths:

  /upload:

    put:
      tags:
        - upload
      summary: Put taxonomy and matches
      operationId: putUpload
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload'
      responses:
        '200':
          description: Put taxonomy and matches successfully

  /nodes:

    get:
      tags:
        - nodes
      summary: |
        Get the root nodes, enriched by their recursively enriched
        child nodes
      operationId: getNodes
      responses:
        '200':
          description: Got root nodes successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rootNodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/DeepNode'

    post:
      tags:
        - nodes
      operationId: postNode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodePost'
      responses:
        '201':
          description: Posted node successfully

  /nodes/{nodeId}:

    patch:
      tags:
        - nodes
      summary: Patch node
      operationId: patchNode
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodePatch'
      responses:
        '200':
          description: Patched node successfully

    delete:
      tags:
        - nodes
      summary: Delete node
      operationId: deleteNode
      parameters:
        - name: nodeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted node successfully

  /entities:

    post:
      tags:
        - entities
      operationId: postEntity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityPost'
      responses:
        '201':
          description: Posted entity successfully

  /entities/{entityId}:

    delete:
      tags:
        - entities
      summary: Delete entity
      operationId: deleteEntity
      parameters:
        - name: entityId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted entity successfully

  /matches:

    get:
      tags:
        - matches
      summary: Get matches for an entity
      operationId: getMatches
      parameters:
        - in: query
          name: entity
          schema:
            type: integer
          description: Entity whose matches to get
        - in: query
          name: offset
          schema:
            type: integer
          description: Pagination Offset
        - in: query
          name: limit
          schema:
            type: integer
          description: Pagination Limit
      responses:
        '200':
          description: Got matches successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rootNodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Match'

components:
  schemas:

    # Upload

    Upload:
      type: object
      properties:
        symptaxUploadZip:
          type: string
          format: binary

    # Node

    NodePost:
      description: Node as posted individually (no ID)
      type: object
      properties:
        parent:
          type: integer
        entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityPostNode'

    Node:
      description: Full node
      allOf:
        - $ref: '#/components/schemas/NodePost'
        - type: object
          properties:
            id:
              type: integer

    DeepNode:
      description: Full node plus recursively added children
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/DeepNode'
            entities:
              type: array
              items:
                $ref: '#/components/schemas/Entity'

    NodePatch:
      properties:
        parent:
          type: integer

    # Entity

    EntityPostNode:
      description: Entity as posted as part of a new node (no ID, no node)
      type: object
      properties:
        name:
          type: string

    EntityPost:
      description: Entity as posted individually (no ID)
      allOf:
        - $ref: '#/components/schemas/EntityPostNode'
        - type: object
          properties:
            node:
              type: integer

    Entity:
      description: Full entity
      allOf:
        - $ref: '#/components/schemas/EntityPost'
        - type: object
          properties:
            id:
              type: integer

    # Match

    Match:
      description: Full match
      type: object
      properties:
        ticket:
          type: integer
        eid:
          type: integer
        mention:
          type: string
        mention_idxs:
          type: array
          items:
            type: integer
        context:
          type: string
